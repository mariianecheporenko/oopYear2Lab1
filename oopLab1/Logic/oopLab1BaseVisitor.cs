//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from oopLab1.g4 by ANTLR 4.13.1

#pragma warning disable 0162
#pragma warning disable 0219
#pragma warning disable 1591
#pragma warning disable 419

namespace oopLab1.Parser;

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IoopLab1Visitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class oopLab1BaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IoopLab1Visitor<Result>
{
    /// <summary>
    /// Visit a parse tree produced by <see cref="oopLab1Parser.parse"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitParse([NotNull] oopLab1Parser.ParseContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>ComparisonExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitComparisonExpr([NotNull] oopLab1Parser.ComparisonExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>NotExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNotExpr([NotNull] oopLab1Parser.NotExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>PowerExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitPowerExpr([NotNull] oopLab1Parser.PowerExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>MulDivExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitMulDivExpr([NotNull] oopLab1Parser.MulDivExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>AddSubExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAddSubExpr([NotNull] oopLab1Parser.AddSubExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>FuncExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFuncExpr([NotNull] oopLab1Parser.FuncExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>ParenExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitParenExpr([NotNull] oopLab1Parser.ParenExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>AtomExpr</c>
    /// labeled alternative in <see cref="oopLab1Parser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAtomExpr([NotNull] oopLab1Parser.AtomExprContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>NumberAtom</c>
    /// labeled alternative in <see cref="oopLab1Parser.atom"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNumberAtom([NotNull] oopLab1Parser.NumberAtomContext context) { return VisitChildren(context); }

    /// <summary>
    /// Visit a parse tree produced by the <c>CellAtom</c>
    /// labeled alternative in <see cref="oopLab1Parser.atom"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCellAtom([NotNull] oopLab1Parser.CellAtomContext context) { return VisitChildren(context); }
}