//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/uni/code/vs/github/oopYear2Lab1/Grammar/oopLab1.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    namespace oopLab1.Logic;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class oopLab1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, MMAX=12, MMIN=13, NOT=14, CELL_ID=15, NUMBER=16, WS=17;
	public const int
		RULE_parse = 0, RULE_expr = 1, RULE_atom = 2;
	public static readonly string[] ruleNames = {
		"parse", "expr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'>'", "'='", "'^'", "'*'", "'/'", "'+'", "'-'", "'('", "','", 
		"')'", "'mmax'", "'mmin'", "'not'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"MMAX", "MMIN", "NOT", "CELL_ID", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "oopLab1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static oopLab1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public oopLab1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public oopLab1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(oopLab1Parser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			expr(0);
			State = 7;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PowerExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PowerExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class MulDivExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class ComparisonExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(oopLab1Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class AtomExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class FuncExprContext : ExprContext {
		public IToken func;
		public ExprContext _expr;
		public IList<ExprContext> _args = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MMAX() { return GetToken(oopLab1Parser.MMAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MMIN() { return GetToken(oopLab1Parser.MMIN, 0); }
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class AddSubExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubExprContext(ExprContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 10;
				Match(NOT);
				State = 11;
				expr(7);
				}
				break;
			case MMAX:
			case MMIN:
				{
				_localctx = new FuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12;
				((FuncExprContext)_localctx).func = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MMAX || _la==MMIN) ) {
					((FuncExprContext)_localctx).func = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 13;
				Match(T__8);
				State = 14;
				((FuncExprContext)_localctx)._expr = expr(0);
				((FuncExprContext)_localctx)._args.Add(((FuncExprContext)_localctx)._expr);
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__9) {
					{
					{
					State = 15;
					Match(T__9);
					State = 16;
					((FuncExprContext)_localctx)._expr = expr(0);
					((FuncExprContext)_localctx)._args.Add(((FuncExprContext)_localctx)._expr);
					}
					}
					State = 21;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 22;
				Match(T__10);
				}
				break;
			case T__8:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				Match(T__8);
				State = 25;
				expr(0);
				State = 26;
				Match(T__10);
				}
				break;
			case CELL_ID:
			case NUMBER:
				{
				_localctx = new AtomExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28;
				atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 43;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new ComparisonExprContext(new ExprContext(_parentctx, _parentState));
						((ComparisonExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 31;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 32;
						((ComparisonExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0)) ) {
							((ComparisonExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 33;
						((ComparisonExprContext)_localctx).right = expr(9);
						}
						break;
					case 2:
						{
						_localctx = new PowerExprContext(new ExprContext(_parentctx, _parentState));
						((PowerExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 34;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 35;
						((PowerExprContext)_localctx).op = Match(T__3);
						State = 36;
						((PowerExprContext)_localctx).right = expr(7);
						}
						break;
					case 3:
						{
						_localctx = new MulDivExprContext(new ExprContext(_parentctx, _parentState));
						((MulDivExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 37;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 38;
						((MulDivExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__4 || _la==T__5) ) {
							((MulDivExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 39;
						((MulDivExprContext)_localctx).right = expr(6);
						}
						break;
					case 4:
						{
						_localctx = new AddSubExprContext(new ExprContext(_parentctx, _parentState));
						((AddSubExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 40;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 41;
						((AddSubExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__7) ) {
							((AddSubExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 42;
						((AddSubExprContext)_localctx).right = expr(5);
						}
						break;
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(oopLab1Parser.NUMBER, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
	}
	public partial class CellAtomContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL_ID() { return GetToken(oopLab1Parser.CELL_ID, 0); }
		public CellAtomContext(AtomContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 4, RULE_atom);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				Match(NUMBER);
				}
				break;
			case CELL_ID:
				_localctx = new CellAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				Match(CELL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,17,53,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,5,1,18,8,1,10,1,12,1,21,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,30,
		8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,44,8,1,10,1,12,
		1,47,9,1,1,2,1,2,3,2,51,8,2,1,2,0,1,2,3,0,2,4,0,4,1,0,12,13,1,0,1,3,1,
		0,5,6,1,0,7,8,58,0,6,1,0,0,0,2,29,1,0,0,0,4,50,1,0,0,0,6,7,3,2,1,0,7,8,
		5,0,0,1,8,1,1,0,0,0,9,10,6,1,-1,0,10,11,5,14,0,0,11,30,3,2,1,7,12,13,7,
		0,0,0,13,14,5,9,0,0,14,19,3,2,1,0,15,16,5,10,0,0,16,18,3,2,1,0,17,15,1,
		0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,22,1,0,0,0,21,19,1,
		0,0,0,22,23,5,11,0,0,23,30,1,0,0,0,24,25,5,9,0,0,25,26,3,2,1,0,26,27,5,
		11,0,0,27,30,1,0,0,0,28,30,3,4,2,0,29,9,1,0,0,0,29,12,1,0,0,0,29,24,1,
		0,0,0,29,28,1,0,0,0,30,45,1,0,0,0,31,32,10,8,0,0,32,33,7,1,0,0,33,44,3,
		2,1,9,34,35,10,6,0,0,35,36,5,4,0,0,36,44,3,2,1,7,37,38,10,5,0,0,38,39,
		7,2,0,0,39,44,3,2,1,6,40,41,10,4,0,0,41,42,7,3,0,0,42,44,3,2,1,5,43,31,
		1,0,0,0,43,34,1,0,0,0,43,37,1,0,0,0,43,40,1,0,0,0,44,47,1,0,0,0,45,43,
		1,0,0,0,45,46,1,0,0,0,46,3,1,0,0,0,47,45,1,0,0,0,48,51,5,16,0,0,49,51,
		5,15,0,0,50,48,1,0,0,0,50,49,1,0,0,0,51,5,1,0,0,0,5,19,29,43,45,50
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
